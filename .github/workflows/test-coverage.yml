name: Test Coverage

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  test-vcf-export-tools:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install pandas openpyxl
        
    - name: Run tests with coverage for vcf_export_tools
      run: |
        pytest tests/test_vcf_export_tools.py \
          --cov=src/visualization/interactive/vcf_export_tools \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term \
          -v
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: vcf_export_tools
        name: vcf-export-tools-coverage
        fail_ci_if_error: false
        
    - name: Upload HTML coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: htmlcov/
        retention-days: 30
        
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))")
        COVERAGE_PERCENT=$(python -c "print(int(float($COVERAGE) * 100))")
        echo "Coverage: ${COVERAGE_PERCENT}%"
        echo "COVERAGE_PERCENT=${COVERAGE_PERCENT}" >> $GITHUB_ENV
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const xml = fs.readFileSync('coverage.xml', 'utf8');
          const match = xml.match(/line-rate="([^"]+)"/);
          const coverage = match ? (parseFloat(match[1]) * 100).toFixed(2) : 'N/A';
          
          const comment = `## ðŸ“Š Test Coverage Report\n\n` +
            `**Module:** \`src/visualization/interactive/vcf_export_tools.py\`\n\n` +
            `**Coverage:** ${coverage}%\n\n` +
            `âœ… Tests passed! Coverage report has been generated.\n\n` +
            `View the detailed HTML report in the workflow artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

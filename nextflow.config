/*
 * Genomic Data Analysis Pipeline - Nextflow Configuration
 * Configuration file for the genomic analysis workflows
 */

// Default parameters
params {
    // Input/output directories
    reads = "data/samples/*/fastq/*.fastq.gz"
    genome = "data/reference/genome.fa"
    annotation = "data/reference/genes.gtf"
    outdir = "results"
    
    // Quality control parameters
    quality_threshold = 20
    min_length = 50
    adapters = "$projectDir/assets/adapters.fa"
    
    // Alignment parameters
    bwa_index = null
    star_index = null
    salmon_index = null
    
    // Variant calling parameters
    min_mapping_quality = 20
    min_base_quality = 20
    ploidy = 2
    
    // Single-cell parameters
    expected_cells = 3000
    chemistry = "auto"
    
    // Machine learning parameters
    model_type = "random_forest"
    cross_validation_folds = 5
    
    // Resource parameters
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '240.h'
    
    // Skip options
    skip_qc = false
    skip_trimming = false
    skip_alignment = false
    skip_variant_calling = false
    skip_multiqc = false
}

// Process configuration
process {
    // Default resource allocation
    cpus = 2
    memory = 4.GB
    time = 1.h
    
    // Error strategy
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Process-specific resource allocation
    withLabel: 'low_memory' {
        cpus = 1
        memory = 2.GB
        time = 30.m
    }
    
    withLabel: 'medium_memory' {
        cpus = 4
        memory = 8.GB
        time = 2.h
    }
    
    withLabel: 'high_memory' {
        cpus = 8
        memory = 32.GB
        time = 8.h
    }
    
    withLabel: 'very_high_memory' {
        cpus = 16
        memory = 64.GB
        time = 24.h
    }
    
    // Tool-specific configurations
    withName: 'FASTQC' {
        cpus = 2
        memory = 4.GB
        time = 1.h
    }
    
    withName: 'TRIMMOMATIC' {
        cpus = 4
        memory = 8.GB
        time = 2.h
    }
    
    withName: 'BWA_MEM' {
        cpus = 8
        memory = 16.GB
        time = 4.h
    }
    
    withName: 'STAR' {
        cpus = 8
        memory = 32.GB
        time = 4.h
    }
    
    withName: 'GATK_HAPLOTYPECALLER' {
        cpus = 4
        memory = 16.GB
        time = 8.h
    }
    
    withName: 'SALMON' {
        cpus = 8
        memory = 16.GB
        time = 2.h
    }
    
    withName: 'CELLRANGER' {
        cpus = 16
        memory = 64.GB
        time = 12.h
    }
    
    withName: 'MACS2' {
        cpus = 4
        memory = 8.GB
        time = 2.h
    }
}

// Execution profiles
profiles {
    // Standard profile (local execution)
    standard {
        process.executor = 'local'
    }
    
    // Docker profile
    docker {
        docker.enabled = true
        docker.userEmulation = true
        process.container = 'galafis/genomic-pipeline:latest'
    }
    
    // Singularity profile
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'galafis/genomic-pipeline.sif'
    }
    
    // Conda profile
    conda {
        conda.enabled = true
        process.conda = '$projectDir/environment.yml'
    }
    
    // HPC profiles
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
            clusterOptions = '--account=genomics'
        }
        
        executor {
            queueSize = 100
            submitRateLimit = '10 sec'
        }
    }
    
    pbs {
        process {
            executor = 'pbs'
            queue = 'workq'
        }
        
        executor {
            queueSize = 50
            submitRateLimit = '10 sec'
        }
    }
    
    sge {
        process {
            executor = 'sge'
            queue = 'all.q'
            penv = 'smp'
        }
        
        executor {
            queueSize = 50
            submitRateLimit = '10 sec'
        }
    }
    
    // Cloud profiles
    aws {
        process {
            executor = 'awsbatch'
            queue = 'genomics-queue'
        }
        
        aws {
            region = 'us-east-1'
            batch {
                cliPath = '/home/ec2-user/miniconda/bin/aws'
            }
        }
    }
    
    gcp {
        process {
            executor = 'google-lifesciences'
            machineType = 'n1-standard-4'
        }
        
        google {
            project = 'your-project-id'
            zone = 'us-central1-a'
            lifeSciences {
                bootDiskSize = 20.GB
                preemptible = true
            }
        }
    }
    
    azure {
        process {
            executor = 'azurebatch'
        }
        
        azure {
            batch {
                location = 'eastus'
                accountName = 'your-batch-account'
                accountKey = 'your-account-key'
                autoPoolMode = true
            }
        }
    }
    
    // Testing profiles
    test {
        params {
            reads = "$projectDir/tests/data/*_{1,2}.fastq.gz"
            genome = "$projectDir/tests/data/genome.fa"
            annotation = "$projectDir/tests/data/genes.gtf"
            outdir = "$projectDir/test_results"
        }
    }
    
    // CI profile for continuous integration
    ci {
        params {
            max_memory = '6.GB'
            max_cpus = 2
            max_time = '6.h'
        }
        
        process {
            cpus = { check_max( 1, 'cpus' ) }
            memory = { check_max( 1.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }
    }
}

// Manifest
manifest {
    name = 'galafis/genomic-data-analysis-pipeline'
    author = 'Gabriel Demetrios Lafis'
    homePage = 'https://github.com/galafis/genomic-data-analysis-pipeline'
    description = 'A comprehensive genomic data analysis pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '1.0.0'
}

// Timeline and report configuration
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR: Invalid max memory '${params.max_memory}', using default."
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "ERROR: Invalid max time '${params.max_time}', using default."
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "ERROR: Invalid max cpus '${params.max_cpus}', using default."
            return obj
        }
    }
}
